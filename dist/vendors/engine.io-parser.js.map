{"version":3,"file":"engine.io-parser.js","sources":["../../../node_modules/engine.io-parser/build/esm/commons.js","../../../node_modules/engine.io-parser/build/esm/encodePacket.browser.js","../../../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js","../../../node_modules/engine.io-parser/build/esm/decodePacket.browser.js","../../../node_modules/engine.io-parser/build/esm/index.js"],"sourcesContent":["const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach((key) => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n","// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n","import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET, } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload, };\n"],"names":["PACKET_TYPES","Object","create","PACKET_TYPES_REVERSE","keys","forEach","key","ERROR_PACKET","type","data","withNativeBlob","Blob","prototype","toString","call","withNativeArrayBuffer","ArrayBuffer","isView","obj","buffer","encodePacket","supportsBinary","callback","encodeBlobAsBase64","fileReader","FileReader","onload","content","result","split","readAsDataURL","toArray","Uint8Array","byteOffset","byteLength","TEXT_ENCODER","encodePacketToBinary","packet","arrayBuffer","then","encoded","TextEncoder","encode","chars","lookup","i","length","charCodeAt","decode","base64","bufferLength","len","p","encoded1","encoded2","encoded3","encoded4","arraybuffer","bytes","decodePacket","encodedPacket","binaryType","mapBinary","charAt","decodeBase64Packet","substring","packetType","decoded","SEPARATOR","String","fromCharCode","encodePayload","packets","encodedPackets","Array","count","join","decodePayload","encodedPayload","decodedPacket","push","createPacketEncoderStream","TransformStream","transform","controller","payloadLength","header","DataView","setUint8","view","setUint16","setBigUint64","BigInt","enqueue","TEXT_DECODER","totalLength","chunks","reduce","acc","chunk","concatChunks","size","shift","j","slice","createPacketDecoderStream","maxPayload","TextDecoder","state","expectedLength","isBinary","headerArray","getUint16","n","getUint32","Math","pow","protocol"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}